// Include required libraries
#include <WiFi.h>
#include <Firebase_ESP_Client.h>
#include <addons/TokenHelper.h>
#include <Adafruit_BMP085.h>     // BMP180 sensor
#include <Adafruit_GFX.h>        // OLED graphics
#include <Adafruit_SSD1306.h>    // OLED driver
#include <WiFiManager.h>         // WiFiManager

// OLED configuration
#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define OLED_RESET    -1
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

// BMP180 sensor instance
Adafruit_BMP085 bmp;

// Default WiFi credentials (optional fallback)
#define WIFI_SSID ""
#define WIFI_PASSWORD ""

// Default Firebase credentials (can be changed via portal)
#define API_KEY ""
#define FIREBASE_PROJECT_ID ""
#define USER_EMAIL ""
#define USER_PASSWORD ""

// Firebase objects
FirebaseData fbdo;
FirebaseAuth auth;
FirebaseConfig config;

// Editable parameters
char api_key[100] = API_KEY;
char project_id[100] = FIREBASE_PROJECT_ID;
char user_email[100] = USER_EMAIL;
char user_password[100] = USER_PASSWORD;

void startWiFiManager() {
  WiFiManager wm;

  WiFiManagerParameter custom_api_key("api", "Firebase API Key", api_key, 100);
  WiFiManagerParameter custom_project_id("pid", "Firebase Project ID", project_id, 100);
  WiFiManagerParameter custom_email("email", "User Email", user_email, 100);
  WiFiManagerParameter custom_pass("pass", "User Password", user_password, 100);

  wm.addParameter(&custom_api_key);
  wm.addParameter(&custom_project_id);
  wm.addParameter(&custom_email);
  wm.addParameter(&custom_pass);

  wm.setConfigPortalTimeout(300); // 5 minutes
  wm.startConfigPortal("BMPConfig");

  // Save updated values from portal
  strcpy(api_key, custom_api_key.getValue());
  strcpy(project_id, custom_project_id.getValue());
  strcpy(user_email, custom_email.getValue());
  strcpy(user_password, custom_pass.getValue());

  // Assign to Firebase config
  config.api_key = api_key;
  auth.user.email = user_email;
  auth.user.password = user_password;
}

void setup() {
  Serial.begin(115200);

  // Optional: Define I2C pins if needed (e.g., GPIO8=SDA, GPIO9=SCL for ESP32-C3)
  Wire.begin(8, 9);

  // Initialize OLED
  if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
    Serial.println("OLED not found");
    while (1);
  }
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.setCursor(0, 0);
  display.println("Initializing...");
  display.display();

  // Initialize BMP180
  if (!bmp.begin()) {
    Serial.println("BMP180 not found");
    display.println("Sensor error!");
    display.display();
    while (1);
  }

  // Start config portal
  startWiFiManager();

  // Connect to Wi-Fi
  Serial.print("Connecting to Wi-Fi");
  while (WiFi.status() != WL_CONNECTED) {
    Serial.print(".");
    delay(300);
  }
  Serial.println();
  Serial.print("Connected with IP: ");
  Serial.println(WiFi.localIP());

  // Firebase setup
  Serial.printf("Firebase Client v%s\n\n", FIREBASE_CLIENT_VERSION);
  config.token_status_callback = tokenStatusCallback;

  Firebase.begin(&config, &auth);
  Firebase.reconnectWiFi(true);
}

void loop() {
  String documentPath = "EspData/BMP180";
  FirebaseJson content;

  // TEMPORARY CALIBRATION OFFSET (adjust as needed)
  float temperature = bmp.readTemperature() - 170;
  float pressure = (bmp.readPressure() / 100.0) - 300;

  Serial.print("Temp: "); Serial.println(temperature);
  Serial.print("Pres: "); Serial.println(pressure);

  // OLED display
  display.clearDisplay();
  display.setCursor(0, 0);
  display.print("BMP180");
  display.setCursor(0, 20);
  display.print("Temp: ");
  display.print(temperature, 2);
  display.println(" C");
  display.setCursor(0, 40);
  display.print("Pres: ");
  display.print(pressure, 2);
  display.println(" hPa");
  display.display();

  // Upload to Firebase
  if (!isnan(temperature) && !isnan(pressure)) {
    content.set("fields/Temperature/stringValue", String(temperature, 2));
    content.set("fields/Pressure/stringValue", String(pressure, 2));

    Serial.print("Sending BMP180 data... ");
    if (Firebase.Firestore.patchDocument(&fbdo, project_id, "", documentPath.c_str(), content.raw(), "Temperature") &&
        Firebase.Firestore.patchDocument(&fbdo, project_id, "", documentPath.c_str(), content.raw(), "Pressure")) {
      Serial.printf("Success\n%s\n\n", fbdo.payload().c_str());
    } else {
      Serial.println(fbdo.errorReason());
    }
  } else {
    Serial.println("Failed to read BMP180 data.");
  }

  delay(10000); // Wait 10 seconds
}
